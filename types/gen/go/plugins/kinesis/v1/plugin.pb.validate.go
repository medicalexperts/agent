// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugins/kinesis/v1/plugin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PluginMultiError, or nil if none found.
func (m *Plugin) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConnection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginValidationError{
				field:  "Connection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Operation.(type) {
	case *Plugin_Put_:
		if v == nil {
			err := PluginValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPut()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Put",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Put",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPut()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "Put",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_Get_:
		if v == nil {
			err := PluginValidationError{
				field:  "Operation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGet()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Get",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Get",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "Get",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.DynamicWorkflowConfiguration != nil {

		if all {
			switch v := interface{}(m.GetDynamicWorkflowConfiguration()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DynamicWorkflowConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DynamicWorkflowConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDynamicWorkflowConfiguration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "DynamicWorkflowConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PluginMultiError(errors)
	}

	return nil
}

// PluginMultiError is an error wrapping multiple validation errors returned by
// Plugin.ValidateAll() if the designated constraints aren't met.
type PluginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginMultiError) AllErrors() []error { return m }

// PluginValidationError is the validation error returned by Plugin.Validate if
// the designated constraints aren't met.
type PluginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginValidationError) ErrorName() string { return "PluginValidationError" }

// Error satisfies the builtin error interface
func (e PluginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetadataMultiError, or nil
// if none found.
func (m *Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MetadataMultiError(errors)
	}

	return nil
}

// MetadataMultiError is an error wrapping multiple validation errors returned
// by Metadata.ValidateAll() if the designated constraints aren't met.
type MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetadataMultiError) AllErrors() []error { return m }

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on Plugin_KinesisConnection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_KinesisConnection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_KinesisConnection with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_KinesisConnectionMultiError, or nil if none found.
func (m *Plugin_KinesisConnection) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_KinesisConnection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAwsConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Plugin_KinesisConnectionValidationError{
					field:  "AwsConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Plugin_KinesisConnectionValidationError{
					field:  "AwsConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAwsConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Plugin_KinesisConnectionValidationError{
				field:  "AwsConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Plugin_KinesisConnectionMultiError(errors)
	}

	return nil
}

// Plugin_KinesisConnectionMultiError is an error wrapping multiple validation
// errors returned by Plugin_KinesisConnection.ValidateAll() if the designated
// constraints aren't met.
type Plugin_KinesisConnectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_KinesisConnectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_KinesisConnectionMultiError) AllErrors() []error { return m }

// Plugin_KinesisConnectionValidationError is the validation error returned by
// Plugin_KinesisConnection.Validate if the designated constraints aren't met.
type Plugin_KinesisConnectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_KinesisConnectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_KinesisConnectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_KinesisConnectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_KinesisConnectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_KinesisConnectionValidationError) ErrorName() string {
	return "Plugin_KinesisConnectionValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_KinesisConnectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_KinesisConnection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_KinesisConnectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_KinesisConnectionValidationError{}

// Validate checks the field values on Plugin_Put with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin_Put) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Put with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Plugin_PutMultiError, or
// nil if none found.
func (m *Plugin_Put) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Put) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	// no validation rules for PartitionKey

	switch v := m.StreamIdentifier.(type) {
	case *Plugin_Put_StreamName:
		if v == nil {
			err := Plugin_PutValidationError{
				field:  "StreamIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StreamName
	case *Plugin_Put_StreamArn:
		if v == nil {
			err := Plugin_PutValidationError{
				field:  "StreamIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StreamArn
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return Plugin_PutMultiError(errors)
	}

	return nil
}

// Plugin_PutMultiError is an error wrapping multiple validation errors
// returned by Plugin_Put.ValidateAll() if the designated constraints aren't met.
type Plugin_PutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_PutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_PutMultiError) AllErrors() []error { return m }

// Plugin_PutValidationError is the validation error returned by
// Plugin_Put.Validate if the designated constraints aren't met.
type Plugin_PutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_PutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_PutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_PutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_PutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_PutValidationError) ErrorName() string { return "Plugin_PutValidationError" }

// Error satisfies the builtin error interface
func (e Plugin_PutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Put.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_PutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_PutValidationError{}

// Validate checks the field values on Plugin_Get with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin_Get) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Get with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Plugin_GetMultiError, or
// nil if none found.
func (m *Plugin_Get) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Get) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShardId

	// no validation rules for ShardIteratorType

	// no validation rules for Limit

	// no validation rules for PollingCooldownMs

	switch v := m.StreamIdentifier.(type) {
	case *Plugin_Get_StreamName:
		if v == nil {
			err := Plugin_GetValidationError{
				field:  "StreamIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StreamName
	case *Plugin_Get_StreamArn:
		if v == nil {
			err := Plugin_GetValidationError{
				field:  "StreamIdentifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StreamArn
	default:
		_ = v // ensures v is used
	}

	if m.StartingSequenceNumber != nil {
		// no validation rules for StartingSequenceNumber
	}

	if m.Timestamp != nil {
		// no validation rules for Timestamp
	}

	if len(errors) > 0 {
		return Plugin_GetMultiError(errors)
	}

	return nil
}

// Plugin_GetMultiError is an error wrapping multiple validation errors
// returned by Plugin_Get.ValidateAll() if the designated constraints aren't met.
type Plugin_GetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_GetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_GetMultiError) AllErrors() []error { return m }

// Plugin_GetValidationError is the validation error returned by
// Plugin_Get.Validate if the designated constraints aren't met.
type Plugin_GetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_GetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_GetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_GetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_GetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_GetValidationError) ErrorName() string { return "Plugin_GetValidationError" }

// Error satisfies the builtin error interface
func (e Plugin_GetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Get.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_GetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_GetValidationError{}
