{
  "swagger": "2.0",
  "info": {
    "title": "security/v1/service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "SignatureService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/signature/sign": {
      "post": {
        "operationId": "SignatureService_Sign",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SignResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SignRequest"
            }
          }
        ],
        "tags": [
          "SignatureService"
        ]
      }
    },
    "/v1/signature/verify": {
      "post": {
        "operationId": "SignatureService_Verify",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifyRequest"
            }
          }
        ],
        "tags": [
          "SignatureService"
        ]
      }
    }
  },
  "definitions": {
    "AzureClientCredentials": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        }
      }
    },
    "BlockBreak": {
      "type": "object",
      "properties": {
        "condition": {
          "type": "string"
        }
      }
    },
    "BlockConditional": {
      "type": "object",
      "properties": {
        "if": {
          "$ref": "#/definitions/ConditionalCondition"
        },
        "elseIf": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ConditionalCondition"
          }
        },
        "else": {
          "$ref": "#/definitions/v1Blocks"
        }
      }
    },
    "BlockLoop": {
      "type": "object",
      "properties": {
        "range": {
          "type": "string",
          "description": "*\nThis can be a binding that evaluates to one of three things:\n 1. An integer           IF type if TYPE_FOR.\n 2. A JSON encoded list  IF type is TYPE_FOREACH.\n 3. A boolean            IF type is TYPE_WHILE. NOTE that this expressition will be re-evaluated on each iteration."
        },
        "type": {
          "$ref": "#/definitions/BlockLoopType"
        },
        "variables": {
          "$ref": "#/definitions/BlockLoopVariables"
        },
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Block"
          }
        }
      }
    },
    "BlockLoopType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_FOR",
        "TYPE_FOREACH",
        "TYPE_WHILE"
      ],
      "default": "TYPE_UNSPECIFIED"
    },
    "BlockLoopVariables": {
      "type": "object",
      "properties": {
        "index": {
          "type": "string",
          "description": "The index of the loop."
        },
        "item": {
          "type": "string",
          "description": "The current item; index if none."
        }
      }
    },
    "BlockParallel": {
      "type": "object",
      "properties": {
        "static": {
          "$ref": "#/definitions/BlockParallelStatic"
        },
        "dynamic": {
          "$ref": "#/definitions/ParallelDynamic"
        },
        "wait": {
          "$ref": "#/definitions/BlockParallelWait"
        },
        "poolSize": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BlockParallelStatic": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Blocks"
          }
        }
      }
    },
    "BlockParallelWait": {
      "type": "string",
      "enum": [
        "WAIT_UNSPECIFIED",
        "WAIT_ALL",
        "WAIT_NONE"
      ],
      "default": "WAIT_UNSPECIFIED",
      "description": " - WAIT_ALL: Wait for every thread to complete.\n - WAIT_NONE: Do not wait for any thread to complete."
    },
    "BlockStreamOptions": {
      "type": "object",
      "properties": {
        "disableAutoSend": {
          "type": "boolean",
          "description": "The UI has \"auto send\" but we need the default to be false\nSo our name here needs to be the opposite."
        }
      }
    },
    "BlockStreamTrigger": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "step": {
          "$ref": "#/definitions/v1Step"
        }
      }
    },
    "BlockStreamVariables": {
      "type": "object",
      "properties": {
        "item": {
          "type": "string"
        }
      }
    },
    "BlockThrow": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        }
      }
    },
    "BlockTryCatch": {
      "type": "object",
      "properties": {
        "try": {
          "$ref": "#/definitions/v1Blocks"
        },
        "catch": {
          "$ref": "#/definitions/v1Blocks"
        },
        "finally": {
          "$ref": "#/definitions/v1Blocks"
        },
        "variables": {
          "$ref": "#/definitions/BlockTryCatchVariables"
        }
      }
    },
    "BlockTryCatchVariables": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "description": "The error inside of the catch block."
        }
      }
    },
    "BulkBulkAction": {
      "type": "string",
      "enum": [
        "BULK_ACTION_UNSPECIFIED",
        "BULK_ACTION_CREATE",
        "BULK_ACTION_UPDATE",
        "BULK_ACTION_DELETE",
        "BULK_ACTION_UPSERT"
      ],
      "default": "BULK_ACTION_UNSPECIFIED"
    },
    "ConditionalCondition": {
      "type": "object",
      "properties": {
        "condition": {
          "type": "string"
        },
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Block"
          }
        }
      }
    },
    "ConnectionDateFolderType": {
      "type": "string",
      "enum": [
        "DATE_FOLDER_TYPE_UNSPECIFIED",
        "DATE_FOLDER_TYPE_YYYY",
        "DATE_FOLDER_TYPE_YYYYMM",
        "DATE_FOLDER_TYPE_YYYYMMDD"
      ],
      "default": "DATE_FOLDER_TYPE_UNSPECIFIED"
    },
    "ConnectionFields": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "databaseNumber": {
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "enableSsl": {
          "type": "boolean"
        }
      }
    },
    "ConnectionUrl": {
      "type": "object",
      "properties": {
        "urlString": {
          "type": "string"
        }
      }
    },
    "ConsumeFrom": {
      "type": "string",
      "enum": [
        "FROM_UNSPECIFIED",
        "FROM_BEGINNING",
        "FROM_LATEST",
        "FROM_SEEK"
      ],
      "default": "FROM_UNSPECIFIED"
    },
    "ConsumeSeek": {
      "type": "object",
      "properties": {
        "topic": {
          "type": "string"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "partition": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CrudCrudAction": {
      "type": "string",
      "enum": [
        "CRUD_ACTION_UNSPECIFIED",
        "CRUD_ACTION_CREATE",
        "CRUD_ACTION_UPDATE",
        "CRUD_ACTION_DELETE",
        "CRUD_ACTION_READ"
      ],
      "default": "CRUD_ACTION_UNSPECIFIED"
    },
    "ExpireOption": {
      "type": "string",
      "enum": [
        "OPTION_UNSPECIFIED",
        "OPTION_NX",
        "OPTION_XX",
        "OPTION_GT",
        "OPTION_LT"
      ],
      "default": "OPTION_UNSPECIFIED"
    },
    "JobDays": {
      "type": "object",
      "properties": {
        "sunday": {
          "type": "boolean"
        },
        "monday": {
          "type": "boolean"
        },
        "tuesday": {
          "type": "boolean"
        },
        "wednesday": {
          "type": "boolean"
        },
        "thursday": {
          "type": "boolean"
        },
        "friday": {
          "type": "boolean"
        },
        "saturday": {
          "type": "boolean"
        }
      }
    },
    "JobInterval": {
      "type": "string",
      "enum": [
        "INTERVAL_UNSPECIFIED",
        "INTERVAL_MINUTE",
        "INTERVAL_HOUR",
        "INTERVAL_DAY",
        "INTERVAL_WEEK",
        "INTERVAL_MONTH"
      ],
      "default": "INTERVAL_UNSPECIFIED"
    },
    "ModesSettings": {
      "type": "object",
      "properties": {
        "default": {
          "type": "string"
        },
        "available": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "OAuthAuthorizationCodeFlow": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "tokenUrl": {
          "type": "string"
        },
        "authUrl": {
          "type": "string"
        },
        "audience": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "tokenScope": {
          "type": "string"
        },
        "refreshTokenFromServer": {
          "type": "boolean"
        },
        "clientAuthMethod": {
          "type": "string"
        }
      }
    },
    "OAuthClientCredentialsFlow": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "tokenUrl": {
          "type": "string"
        },
        "audience": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "OAuthPasswordGrantFlow": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "tokenUrl": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "audience": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "ParallelDynamic": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "string"
        },
        "variables": {
          "$ref": "#/definitions/ParallelDynamicVariables"
        },
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Block"
          }
        }
      }
    },
    "ParallelDynamicVariables": {
      "type": "object",
      "properties": {
        "item": {
          "type": "string"
        }
      }
    },
    "ParametersQueryParam": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "You can specify multiple values for a single query parameter in a URL"
    },
    "PluginAdlsConnection": {
      "type": "object",
      "properties": {
        "accountName": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "auth": {
          "$ref": "#/definitions/v1Azure"
        }
      },
      "description": "We need to repeat that it's Adls because of the schema checker that's built\nbased off of these types. It errors out when there is a duplicate type\nname."
    },
    "PluginBulk": {
      "type": "object",
      "properties": {
        "resourceType": {
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/BulkBulkAction"
        },
        "resourceBody": {
          "type": "string",
          "title": "delete and update require Id, which will be part of body"
        },
        "externalId": {
          "type": "string",
          "title": "only used for upsert https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/walkthrough_upsert.htm"
        }
      }
    },
    "PluginConsume": {
      "type": "object",
      "properties": {
        "from": {
          "$ref": "#/definitions/ConsumeFrom"
        },
        "topic": {
          "type": "string",
          "description": "NOTE(frank): SMH. Because our form template system if VERY limited,\nthere no way to send an array to the backend if we take in one topic in the UI."
        },
        "groupId": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "seek": {
          "$ref": "#/definitions/ConsumeSeek",
          "description": "NOTE(frank): Another instance of template system limitations..."
        },
        "readUncommitted": {
          "type": "boolean"
        }
      }
    },
    "PluginCosmosDbConnection": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "databaseId": {
          "type": "string"
        },
        "auth": {
          "$ref": "#/definitions/v1Azure"
        }
      }
    },
    "PluginCouchbaseConnection": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "bucket": {
          "type": "string"
        },
        "useTls": {
          "type": "boolean"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "PluginCouchbaseEndpoint": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PluginCouchbaseGet": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "identifier": {
          "$ref": "#/definitions/PluginCouchbaseIdentifier"
        }
      }
    },
    "PluginCouchbaseIdentifier": {
      "type": "object",
      "properties": {
        "scope": {
          "type": "string"
        },
        "collection": {
          "type": "string"
        }
      }
    },
    "PluginCouchbaseInsert": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "identifier": {
          "$ref": "#/definitions/PluginCouchbaseIdentifier"
        }
      }
    },
    "PluginCouchbaseRemove": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "identifier": {
          "$ref": "#/definitions/PluginCouchbaseIdentifier"
        }
      }
    },
    "PluginCreateContainer": {
      "type": "object",
      "properties": {
        "fileSystem": {
          "type": "string"
        }
      },
      "title": "Actions"
    },
    "PluginCreateDirectory": {
      "type": "object",
      "properties": {
        "fileSystem": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "PluginCreateIndex": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "PluginCrud": {
      "type": "object",
      "properties": {
        "resourceType": {
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/CrudCrudAction"
        },
        "resourceBody": {
          "type": "string",
          "title": "delete doesn't require body, other actions do"
        },
        "resourceId": {
          "type": "string",
          "title": "delete requires resource_id, other actions don't"
        }
      }
    },
    "PluginDatabricksConnection": {
      "type": "object",
      "properties": {
        "defaultCatalog": {
          "type": "string"
        },
        "defaultSchema": {
          "type": "string"
        },
        "hostUrl": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "PluginDel": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      }
    },
    "PluginDeleteDirectory": {
      "type": "object",
      "properties": {
        "fileSystem": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "PluginDeleteFile": {
      "type": "object",
      "properties": {
        "fileSystem": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "PluginDownloadFile": {
      "type": "object",
      "properties": {
        "fileSystem": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "PluginExpire": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "seconds": {
          "type": "integer",
          "format": "int32"
        },
        "option": {
          "$ref": "#/definitions/ExpireOption"
        }
      }
    },
    "PluginGet": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      }
    },
    "PluginHdel": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "field": {
          "type": "string"
        }
      }
    },
    "PluginHget": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "field": {
          "type": "string"
        }
      }
    },
    "PluginHgetall": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      }
    },
    "PluginHkeys": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      }
    },
    "PluginHlen": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      }
    },
    "PluginHmget": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "fields": {
          "type": "string",
          "title": "comma-separated list"
        }
      }
    },
    "PluginHset": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "field": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "PluginHsetnx": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "field": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "PluginHvals": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      }
    },
    "PluginKeys": {
      "type": "object",
      "properties": {
        "pattern": {
          "type": "string"
        }
      }
    },
    "PluginKinesisConnection": {
      "type": "object",
      "properties": {
        "awsConfig": {
          "$ref": "#/definitions/v1AWSConfig"
        }
      }
    },
    "PluginKinesisGet": {
      "type": "object",
      "properties": {
        "shardId": {
          "type": "string"
        },
        "shardIteratorType": {
          "$ref": "#/definitions/PluginShardIteratorType"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "pollingCooldownMs": {
          "type": "integer",
          "format": "int32",
          "title": "not required by kinesis, but something we want to allow users to configure\nthis is the amount of time in milliseconds between asking kinesis to get records when polling in a loop"
        },
        "startingSequenceNumber": {
          "type": "string",
          "title": "these 2 are required depending on the shard iterator type selected"
        },
        "timestamp": {
          "type": "string"
        },
        "streamIdentifierType": {
          "$ref": "#/definitions/PluginStreamIdentifier"
        },
        "streamName": {
          "type": "string"
        },
        "streamArn": {
          "type": "string"
        }
      },
      "title": "https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetRecords.html\nwe will need to get a shard iterator first\nhttps://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html"
    },
    "PluginKinesisPut": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        },
        "partitionKey": {
          "type": "string"
        },
        "streamIdentifierType": {
          "$ref": "#/definitions/PluginStreamIdentifier"
        },
        "streamName": {
          "type": "string"
        },
        "streamArn": {
          "type": "string"
        }
      },
      "title": "https://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecord.html\nhttps://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecords.html"
    },
    "PluginLindex": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "index": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PluginListDirectoryContents": {
      "type": "object",
      "properties": {
        "fileSystem": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "PluginListIndexes": {
      "type": "object"
    },
    "PluginLlen": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      }
    },
    "PluginLpush": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "PluginLrange": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "stop": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PluginLrem": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "PluginMget": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "string",
          "title": "comma-separated list"
        }
      }
    },
    "PluginOperationType": {
      "type": "string",
      "enum": [
        "OPERATION_TYPE_UNSPECIFIED",
        "OPERATION_TYPE_GET",
        "OPERATION_TYPE_PUT"
      ],
      "default": "OPERATION_TYPE_UNSPECIFIED"
    },
    "PluginOracleDbConnection": {
      "type": "object",
      "properties": {
        "hostUrl": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "user": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "databaseService": {
          "type": "string"
        },
        "useTcps": {
          "type": "boolean"
        },
        "connectionType": {
          "type": "string"
        },
        "connectionUrl": {
          "type": "string"
        }
      }
    },
    "PluginPointOperation": {
      "type": "object",
      "properties": {
        "containerId": {
          "type": "string"
        },
        "read": {
          "$ref": "#/definitions/PluginPointOperationRead"
        },
        "replace": {
          "$ref": "#/definitions/PointOperationReplace"
        },
        "upsert": {
          "$ref": "#/definitions/PluginPointOperationUpsert"
        },
        "delete": {
          "$ref": "#/definitions/PluginPointOperationDelete"
        },
        "create": {
          "$ref": "#/definitions/PluginPointOperationCreate"
        }
      }
    },
    "PluginPointOperationCreate": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "partitionKey": {
          "type": "string"
        }
      },
      "title": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cosmosdb/cosmos/src/client/Item/Items.ts#L295"
    },
    "PluginPointOperationDelete": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "partitionKey": {
          "type": "string"
        }
      },
      "title": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cosmosdb/cosmos/src/client/Item/Item.ts#L196"
    },
    "PluginPointOperationRead": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "partitionKey": {
          "type": "string"
        }
      },
      "title": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cosmosdb/cosmos/src/client/Item/Item.ts#L78"
    },
    "PluginPointOperationUpsert": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "partitionKey": {
          "type": "string"
        }
      },
      "title": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cosmosdb/cosmos/src/client/Item/Items.ts#L355"
    },
    "PluginProduce": {
      "type": "object",
      "properties": {
        "acks": {
          "$ref": "#/definitions/v1Acks"
        },
        "clientId": {
          "type": "string"
        },
        "timeout": {
          "type": "integer",
          "format": "int32"
        },
        "compression": {
          "$ref": "#/definitions/v1Compression"
        },
        "transactionId": {
          "type": "string"
        },
        "autoCreateTopic": {
          "type": "boolean"
        },
        "idempotent": {
          "type": "boolean"
        },
        "transaction": {
          "type": "boolean"
        },
        "messages": {
          "type": "string"
        }
      }
    },
    "PluginQuery": {
      "type": "object",
      "properties": {
        "vector": {
          "type": "string"
        },
        "topK": {
          "type": "string"
        }
      }
    },
    "PluginRaw": {
      "type": "object",
      "properties": {
        "singleton": {
          "$ref": "#/definitions/PluginRawSingleton"
        }
      }
    },
    "PluginRawSingleton": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        }
      }
    },
    "PluginRenameDirectory": {
      "type": "object",
      "properties": {
        "fileSystem": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "newPath": {
          "type": "string"
        }
      }
    },
    "PluginSadd": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "member": {
          "type": "string"
        }
      }
    },
    "PluginSalesforceConnection": {
      "type": "object",
      "properties": {
        "instanceUrl": {
          "type": "string"
        },
        "auth": {
          "$ref": "#/definitions/commonv1Auth"
        }
      },
      "title": "children messages"
    },
    "PluginScard": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      }
    },
    "PluginSet": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "expirationMs": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PluginShardIteratorType": {
      "type": "string",
      "enum": [
        "SHARD_ITERATOR_TYPE_UNSPECIFIED",
        "SHARD_ITERATOR_TYPE_AT_SEQUENCE_NUMBER",
        "SHARD_ITERATOR_TYPE_AFTER_SEQUENCE_NUMBER",
        "SHARD_ITERATOR_TYPE_AT_TIMESTAMP",
        "SHARD_ITERATOR_TYPE_TRIM_HORIZON",
        "SHARD_ITERATOR_TYPE_LATEST"
      ],
      "default": "SHARD_ITERATOR_TYPE_UNSPECIFIED",
      "title": "https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#API_GetShardIterator_RequestSyntax"
    },
    "PluginSismember": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "member": {
          "type": "string"
        }
      }
    },
    "PluginSmembers": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      }
    },
    "PluginSmtpConnection": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "secure": {
          "type": "boolean"
        }
      }
    },
    "PluginSoql": {
      "type": "object",
      "properties": {
        "sqlBody": {
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/SoqlSoqlAction"
        }
      },
      "title": "Action Fields"
    },
    "PluginSql": {
      "type": "object",
      "properties": {
        "singleton": {
          "$ref": "#/definitions/PluginSqlSingleton"
        }
      },
      "title": "Action Fields"
    },
    "PluginSqlSingleton": {
      "type": "object",
      "properties": {
        "containerId": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "crossPartition": {
          "type": "boolean"
        },
        "partitionKey": {
          "type": "string"
        }
      },
      "title": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cosmosdb/cosmos/src/client/Item/Items.ts#L87"
    },
    "PluginSrandmember": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PluginSrem": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "member": {
          "type": "string"
        }
      }
    },
    "PluginStreamIdentifier": {
      "type": "string",
      "enum": [
        "STREAM_IDENTIFIER_UNSPECIFIED",
        "STREAM_IDENTIFIER_STREAM_NAME",
        "STREAM_IDENTIFIER_STREAM_ARN"
      ],
      "default": "STREAM_IDENTIFIER_UNSPECIFIED"
    },
    "PluginStructured": {
      "type": "object",
      "properties": {
        "get": {
          "$ref": "#/definitions/PluginGet"
        },
        "set": {
          "$ref": "#/definitions/PluginSet"
        },
        "del": {
          "$ref": "#/definitions/PluginDel"
        },
        "keys": {
          "$ref": "#/definitions/PluginKeys"
        },
        "mget": {
          "$ref": "#/definitions/PluginMget"
        },
        "hget": {
          "$ref": "#/definitions/PluginHget"
        },
        "hmget": {
          "$ref": "#/definitions/PluginHmget"
        },
        "hgetall": {
          "$ref": "#/definitions/PluginHgetall"
        },
        "hset": {
          "$ref": "#/definitions/PluginHset"
        },
        "hsetnx": {
          "$ref": "#/definitions/PluginHsetnx"
        },
        "hlen": {
          "$ref": "#/definitions/PluginHlen"
        },
        "hdel": {
          "$ref": "#/definitions/PluginHdel"
        },
        "hkeys": {
          "$ref": "#/definitions/PluginHkeys"
        },
        "hvals": {
          "$ref": "#/definitions/PluginHvals"
        },
        "lindex": {
          "$ref": "#/definitions/PluginLindex"
        },
        "llen": {
          "$ref": "#/definitions/PluginLlen"
        },
        "lpush": {
          "$ref": "#/definitions/PluginLpush"
        },
        "lrem": {
          "$ref": "#/definitions/PluginLrem"
        },
        "lrange": {
          "$ref": "#/definitions/PluginLrange"
        },
        "sadd": {
          "$ref": "#/definitions/PluginSadd"
        },
        "scard": {
          "$ref": "#/definitions/PluginScard"
        },
        "smembers": {
          "$ref": "#/definitions/PluginSmembers"
        },
        "sismember": {
          "$ref": "#/definitions/PluginSismember"
        },
        "srandmember": {
          "$ref": "#/definitions/PluginSrandmember"
        },
        "srem": {
          "$ref": "#/definitions/PluginSrem"
        },
        "zadd": {
          "$ref": "#/definitions/PluginZadd"
        },
        "zcard": {
          "$ref": "#/definitions/PluginZcard"
        },
        "zcount": {
          "$ref": "#/definitions/PluginZcount"
        },
        "zrange": {
          "$ref": "#/definitions/PluginZrange"
        },
        "zrank": {
          "$ref": "#/definitions/PluginZrank"
        },
        "zrem": {
          "$ref": "#/definitions/PluginZrem"
        },
        "zscore": {
          "$ref": "#/definitions/PluginZscore"
        },
        "expire": {
          "$ref": "#/definitions/PluginExpire"
        },
        "ttl": {
          "$ref": "#/definitions/PluginTtl"
        }
      }
    },
    "PluginTtl": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      }
    },
    "PluginUploadFile": {
      "type": "object",
      "properties": {
        "fileSystem": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      }
    },
    "PluginUpsertVector": {
      "type": "object",
      "properties": {
        "raw": {
          "type": "string"
        }
      }
    },
    "PluginZadd": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "score": {
          "type": "number",
          "format": "double"
        },
        "member": {
          "type": "string"
        }
      },
      "title": "TODO: (joey) support options as well: https://redis.io/commands/zadd/"
    },
    "PluginZcard": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      }
    },
    "PluginZcount": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "min": {
          "type": "number",
          "format": "double"
        },
        "max": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "PluginZrange": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "stop": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PluginZrank": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "member": {
          "type": "string"
        }
      },
      "title": "TODO: (joey) add optional withscore"
    },
    "PluginZrem": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "member": {
          "type": "string"
        }
      }
    },
    "PluginZscore": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "member": {
          "type": "string"
        }
      }
    },
    "PointOperationReplace": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "partitionKey": {
          "type": "string"
        }
      },
      "title": "https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cosmosdb/cosmos/src/client/Item/Item.ts#L128"
    },
    "ProfilesModes": {
      "type": "object",
      "properties": {
        "editor": {
          "$ref": "#/definitions/ModesSettings"
        },
        "preview": {
          "$ref": "#/definitions/ModesSettings"
        },
        "deployed": {
          "$ref": "#/definitions/ModesSettings"
        }
      }
    },
    "ResourceApiLiteral": {
      "type": "object",
      "properties": {
        "data": {}
      }
    },
    "ResourceLiteral": {
      "type": "object",
      "properties": {
        "data": {},
        "signature": {
          "$ref": "#/definitions/v1Signature"
        },
        "resourceId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string"
        },
        "pageVersion": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SASLMechanism": {
      "type": "string",
      "enum": [
        "MECHANISM_UNSPECIFIED",
        "MECHANISM_PLAIN",
        "MECHANISM_SCRAM_SHA256",
        "MECHANISM_SCRAM_SHA512",
        "MECHANISM_AWS"
      ],
      "default": "MECHANISM_UNSPECIFIED"
    },
    "SoqlSoqlAction": {
      "type": "string",
      "enum": [
        "SOQL_ACTION_UNSPECIFIED",
        "SOQL_ACTION_SOQL"
      ],
      "default": "SOQL_ACTION_UNSPECIFIED",
      "description": "Specified for singleton types."
    },
    "TriggerApplication": {
      "type": "object",
      "properties": {
        "options": {
          "$ref": "#/definitions/TriggerApplicationOptions"
        },
        "id": {
          "type": "string"
        },
        "pageId": {
          "type": "string"
        }
      }
    },
    "TriggerApplicationOptions": {
      "type": "object",
      "properties": {
        "executeOnPageLoad": {
          "type": "boolean"
        }
      }
    },
    "TriggerJob": {
      "type": "object",
      "properties": {
        "options": {
          "$ref": "#/definitions/TriggerJobOptions"
        },
        "frequency": {
          "type": "integer",
          "format": "int32"
        },
        "interval": {
          "$ref": "#/definitions/JobInterval"
        },
        "dayOfMonth": {
          "type": "integer",
          "format": "int32"
        },
        "days": {
          "$ref": "#/definitions/JobDays"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "timezoneLocale": {
          "type": "string"
        }
      }
    },
    "TriggerJobOptions": {
      "type": "object",
      "properties": {
        "profiles": {
          "$ref": "#/definitions/v1Profiles"
        },
        "sendEmailOnFailure": {
          "type": "boolean"
        },
        "deployedCommitId": {
          "type": "string"
        }
      }
    },
    "TriggerWorkflowOptions": {
      "type": "object",
      "properties": {
        "profiles": {
          "$ref": "#/definitions/v1Profiles"
        },
        "deployedCommitId": {
          "type": "string"
        }
      }
    },
    "TriggerWorkflowParameters": {
      "type": "object",
      "properties": {
        "query": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ParametersQueryParam"
          }
        },
        "body": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "VariablesConfig": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1VariablesType"
        },
        "mode": {
          "$ref": "#/definitions/v1VariablesMode"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "apiv1Trigger": {
      "type": "object",
      "properties": {
        "application": {
          "$ref": "#/definitions/TriggerApplication"
        },
        "workflow": {
          "$ref": "#/definitions/v1TriggerWorkflow"
        },
        "job": {
          "$ref": "#/definitions/TriggerJob"
        }
      }
    },
    "apiv1Variables": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/VariablesConfig"
          }
        }
      }
    },
    "athenav1Connection": {
      "type": "object",
      "properties": {
        "workgroupName": {
          "type": "string"
        },
        "overrideS3OutputLocation": {
          "type": "boolean"
        },
        "s3OutputLocation": {
          "type": "string"
        },
        "s3OutputLocationSuffix": {
          "$ref": "#/definitions/ConnectionDateFolderType"
        },
        "databaseName": {
          "type": "string"
        },
        "awsConfig": {
          "$ref": "#/definitions/v1AWSConfig"
        }
      }
    },
    "commonv1Auth": {
      "type": "object",
      "properties": {
        "passwordGrantFlow": {
          "$ref": "#/definitions/OAuthPasswordGrantFlow"
        },
        "authorizationCodeFlow": {
          "$ref": "#/definitions/OAuthAuthorizationCodeFlow"
        },
        "basic": {
          "$ref": "#/definitions/v1Basic"
        },
        "clientCredentialsFlow": {
          "$ref": "#/definitions/OAuthClientCredentialsFlow"
        },
        "key": {
          "$ref": "#/definitions/v1AzureKey",
          "title": "todo: remove me when cosmos updates"
        }
      }
    },
    "commonv1Metadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "folder": {
          "type": "string"
        },
        "timestamps": {
          "$ref": "#/definitions/v1Timestamps"
        },
        "version": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "commonv1Property": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "editable": {
          "type": "boolean"
        },
        "internal": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "mandatory": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "defaultValue": {
          "type": "string"
        },
        "minRange": {
          "type": "string"
        },
        "maxRange": {
          "type": "string"
        },
        "valueOptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "system": {
          "type": "boolean",
          "title": "system properties are ones injected by the system"
        },
        "file": {
          "$ref": "#/definitions/v1FileMetadata"
        }
      }
    },
    "commonv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "pluginsadlsv1Plugin": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "dynamicWorkflowConfiguration": {
          "$ref": "#/definitions/v1DynamicWorkflowConfiguration"
        },
        "connection": {
          "$ref": "#/definitions/PluginAdlsConnection"
        },
        "createContainer": {
          "$ref": "#/definitions/PluginCreateContainer"
        },
        "createDirectory": {
          "$ref": "#/definitions/PluginCreateDirectory"
        },
        "renameDirectory": {
          "$ref": "#/definitions/PluginRenameDirectory"
        },
        "deleteDirectory": {
          "$ref": "#/definitions/PluginDeleteDirectory"
        },
        "listDirectoryContents": {
          "$ref": "#/definitions/PluginListDirectoryContents"
        },
        "uploadFile": {
          "$ref": "#/definitions/PluginUploadFile"
        },
        "downloadFile": {
          "$ref": "#/definitions/PluginDownloadFile"
        },
        "deleteFile": {
          "$ref": "#/definitions/PluginDeleteFile"
        }
      }
    },
    "pluginsathenav1Plugin": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "connection": {
          "$ref": "#/definitions/athenav1Connection"
        },
        "runSql": {
          "$ref": "#/definitions/v1SQLExecution"
        },
        "dynamicWorkflowConfiguration": {
          "$ref": "#/definitions/v1DynamicWorkflowConfiguration"
        }
      }
    },
    "pluginsbigqueryv1MappedColumns": {
      "type": "object",
      "properties": {
        "json": {
          "type": "string"
        },
        "sql": {
          "type": "string"
        }
      }
    },
    "pluginsbigqueryv1Plugin": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "usePreparedSql": {
          "type": "boolean"
        },
        "operation": {
          "type": "string"
        },
        "useAdvancedMatching": {
          "type": "string"
        },
        "table": {
          "type": "string"
        },
        "newValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginsbigqueryv1Tuple"
          }
        },
        "oldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginsbigqueryv1Tuple"
          }
        },
        "filterBy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mappingMode": {
          "type": "string"
        },
        "mappedColumns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginsbigqueryv1MappedColumns"
          }
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginsbigqueryv1SuperblocksMetadata"
        }
      }
    },
    "pluginsbigqueryv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginsbigqueryv1Tuple": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "pluginscockroachdbv1MappedColumns": {
      "type": "object",
      "properties": {
        "json": {
          "type": "string"
        },
        "sql": {
          "type": "string"
        }
      }
    },
    "pluginscockroachdbv1Plugin": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "usePreparedSql": {
          "type": "boolean"
        },
        "operation": {
          "type": "string"
        },
        "useAdvancedMatching": {
          "type": "string"
        },
        "table": {
          "type": "string"
        },
        "newValues": {
          "type": "string"
        },
        "oldValues": {
          "type": "string"
        },
        "filterBy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mappingMode": {
          "type": "string"
        },
        "mappedColumns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginscockroachdbv1MappedColumns"
          }
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginscockroachdbv1SuperblocksMetadata"
        },
        "insertedRows": {
          "type": "string"
        },
        "deletedRows": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        }
      }
    },
    "pluginscockroachdbv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginscosmosdbv1Plugin": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "dynamicWorkflowConfiguration": {
          "$ref": "#/definitions/v1DynamicWorkflowConfiguration"
        },
        "connection": {
          "$ref": "#/definitions/PluginCosmosDbConnection"
        },
        "sql": {
          "$ref": "#/definitions/PluginSql"
        },
        "pointOperation": {
          "$ref": "#/definitions/PluginPointOperation",
          "title": "these operations will only ever affect a single item"
        }
      }
    },
    "pluginscouchbasev1Plugin": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "connection": {
          "$ref": "#/definitions/PluginCouchbaseConnection"
        },
        "endpoint": {
          "$ref": "#/definitions/PluginCouchbaseEndpoint",
          "title": "TODO (jason4012) we should unify the interface\nso that endpoint doesn't have to be always be set here for SSH tunneling"
        },
        "dynamicWorkflowConfiguration": {
          "$ref": "#/definitions/v1DynamicWorkflowConfiguration"
        },
        "tunnel": {
          "$ref": "#/definitions/v1SSHConfiguration"
        },
        "runSql": {
          "$ref": "#/definitions/v1SQLExecution"
        },
        "insert": {
          "$ref": "#/definitions/PluginCouchbaseInsert"
        },
        "get": {
          "$ref": "#/definitions/PluginCouchbaseGet"
        },
        "remove": {
          "$ref": "#/definitions/PluginCouchbaseRemove"
        }
      }
    },
    "pluginscustomv1Plugin": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "config": {
          "type": "string",
          "title": "NOTE(frank): Need to support JSON in the UI"
        }
      },
      "title": "NOTE(frank): THIS IS EXPERIMENTAL AND SUBJECT TO CHANGE"
    },
    "pluginsdatabricksv1Plugin": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "connection": {
          "$ref": "#/definitions/PluginDatabricksConnection"
        },
        "operation": {
          "$ref": "#/definitions/v1SQLOperation"
        },
        "runSql": {
          "$ref": "#/definitions/v1SQLExecution"
        },
        "bulkEdit": {
          "$ref": "#/definitions/v1SQLBulkEdit"
        },
        "dynamicWorkflowConfiguration": {
          "$ref": "#/definitions/v1DynamicWorkflowConfiguration"
        }
      }
    },
    "pluginsdynamodbv1MappedColumns": {
      "type": "object",
      "properties": {
        "json": {
          "type": "string"
        },
        "sql": {
          "type": "string"
        }
      }
    },
    "pluginsdynamodbv1Plugin": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "usePreparedSql": {
          "type": "boolean"
        },
        "operation": {
          "type": "string"
        },
        "useAdvancedMatching": {
          "type": "string"
        },
        "table": {
          "type": "string"
        },
        "newValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginsdynamodbv1Tuple"
          }
        },
        "oldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginsdynamodbv1Tuple"
          }
        },
        "filterBy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mappingMode": {
          "type": "string"
        },
        "mappedColumns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginsdynamodbv1MappedColumns"
          }
        },
        "action": {
          "type": "string"
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginsdynamodbv1SuperblocksMetadata"
        }
      }
    },
    "pluginsdynamodbv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginsdynamodbv1Tuple": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "pluginsemailv1Plugin": {
      "type": "object",
      "properties": {
        "emailFrom": {
          "type": "string"
        },
        "emailTo": {
          "type": "string"
        },
        "emailCc": {
          "type": "string"
        },
        "emailBcc": {
          "type": "string"
        },
        "emailSubject": {
          "type": "string"
        },
        "emailBody": {
          "type": "string"
        },
        "emailAttachments": {
          "type": "string"
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginsemailv1SuperblocksMetadata"
        }
      }
    },
    "pluginsemailv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginsgcsv1Custom": {
      "type": "object",
      "properties": {
        "presignedExpiration": {
          "$ref": "#/definitions/pluginsgcsv1Property"
        }
      }
    },
    "pluginsgcsv1Plugin": {
      "type": "object",
      "properties": {
        "resource": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "fileObjects": {
          "type": "string"
        },
        "responseType": {
          "type": "string"
        },
        "custom": {
          "$ref": "#/definitions/pluginsgcsv1Custom"
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginsgcsv1SuperblocksMetadata"
        }
      }
    },
    "pluginsgcsv1Property": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "integer",
          "format": "int32"
        },
        "editable": {
          "type": "boolean"
        },
        "internal": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "mandatory": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "defaultValue": {
          "type": "string"
        },
        "minRange": {
          "type": "string"
        },
        "maxRange": {
          "type": "string"
        },
        "valueOptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "pluginsgcsv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginsgraphqlv1Custom": {
      "type": "object",
      "properties": {
        "variables": {
          "$ref": "#/definitions/commonv1Property"
        },
        "requestFormat": {
          "$ref": "#/definitions/commonv1Property"
        }
      }
    },
    "pluginsgraphqlv1Plugin": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "headers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/commonv1Property"
          }
        },
        "body": {
          "type": "string"
        },
        "custom": {
          "$ref": "#/definitions/pluginsgraphqlv1Custom"
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/commonv1SuperblocksMetadata"
        },
        "verboseHttpOutput": {
          "type": "boolean",
          "title": "Include HTTP response metadata in output"
        },
        "doNotFailOnRequestError": {
          "type": "boolean",
          "description": "Do not fail executions on failed requests (4xx/5xx). We use the negative here to ensure the default (falsy) behavior matches the existing API behavior."
        }
      }
    },
    "pluginsgsheetsv1Plugin": {
      "type": "object",
      "properties": {
        "spreadsheetId": {
          "type": "string"
        },
        "sheetTitle": {
          "type": "string"
        },
        "range": {
          "type": "string"
        },
        "rowNumber": {
          "type": "string",
          "title": "Super confusing but these are potentially bindings. Or stringified int\nIf this was not a binding, it would be best to keep it int32 here"
        },
        "extractFirstRowHeader": {
          "type": "boolean"
        },
        "headerRowNumber": {
          "type": "string",
          "title": "Same as above comment"
        },
        "format": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "preserveHeaderRow": {
          "type": "boolean"
        },
        "includeHeaderRow": {
          "type": "boolean"
        },
        "action": {
          "type": "string"
        },
        "writeToDestinationType": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginsgsheetsv1SuperblocksMetadata"
        }
      }
    },
    "pluginsgsheetsv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginsjavascriptv1Plugin": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginsjavascriptv1SuperblocksMetadata"
        }
      }
    },
    "pluginsjavascriptv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginskafkav1Operation": {
      "type": "string",
      "enum": [
        "OPERATION_UNSPECIFIED",
        "OPERATION_CONSUME",
        "OPERATION_PRODUCE"
      ],
      "default": "OPERATION_UNSPECIFIED"
    },
    "pluginskafkav1Plugin": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "operation": {
          "$ref": "#/definitions/pluginskafkav1Operation"
        },
        "produce": {
          "$ref": "#/definitions/PluginProduce"
        },
        "consume": {
          "$ref": "#/definitions/PluginConsume"
        },
        "cluster": {
          "$ref": "#/definitions/v1Cluster"
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginskafkav1SuperblocksMetadata",
          "title": "DEPRECATED"
        },
        "dynamicWorkflowConfiguration": {
          "$ref": "#/definitions/v1DynamicWorkflowConfiguration"
        }
      },
      "description": "NOTE(frank): Since it's Kafka, there's a zillion options. We'll start with the basics for now."
    },
    "pluginskafkav1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        },
        "syncedFromProfileId": {
          "type": "string"
        }
      },
      "title": "DEPRECATED"
    },
    "pluginskinesisv1Plugin": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "connection": {
          "$ref": "#/definitions/PluginKinesisConnection"
        },
        "operationType": {
          "$ref": "#/definitions/PluginOperationType"
        },
        "put": {
          "$ref": "#/definitions/PluginKinesisPut"
        },
        "get": {
          "$ref": "#/definitions/PluginKinesisGet"
        },
        "dynamicWorkflowConfiguration": {
          "$ref": "#/definitions/v1DynamicWorkflowConfiguration"
        }
      }
    },
    "pluginsmariadbv1MappedColumns": {
      "type": "object",
      "properties": {
        "json": {
          "type": "string"
        },
        "sql": {
          "type": "string"
        }
      }
    },
    "pluginsmariadbv1Plugin": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "usePreparedSql": {
          "type": "boolean"
        },
        "operation": {
          "type": "string"
        },
        "useAdvancedMatching": {
          "type": "string"
        },
        "table": {
          "type": "string"
        },
        "newValues": {
          "type": "string"
        },
        "oldValues": {
          "type": "string"
        },
        "filterBy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mappingMode": {
          "type": "string"
        },
        "mappedColumns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginsmariadbv1MappedColumns"
          }
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginsmariadbv1SuperblocksMetadata"
        },
        "insertedRows": {
          "type": "string"
        },
        "deletedRows": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        }
      }
    },
    "pluginsmariadbv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginsmongodbv1Plugin": {
      "type": "object",
      "properties": {
        "resource": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "pipeline": {
          "type": "string"
        },
        "projection": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "field": {
          "type": "string"
        },
        "sortby": {
          "type": "string"
        },
        "limit": {
          "type": "string",
          "title": "Super confusing, but these could be bindings or string ints\nIf they were not potential bindings, we should let them be int32s instead"
        },
        "skip": {
          "type": "string"
        },
        "document": {
          "type": "string"
        },
        "replacement": {
          "type": "string"
        },
        "filter": {
          "type": "string"
        },
        "options": {
          "type": "string"
        },
        "update": {
          "type": "string"
        },
        "distinctKey": {
          "type": "string"
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginsmongodbv1SuperblocksMetadata"
        }
      }
    },
    "pluginsmongodbv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginsmssqlv1MappedColumns": {
      "type": "object",
      "properties": {
        "json": {
          "type": "string"
        },
        "sql": {
          "type": "string"
        }
      }
    },
    "pluginsmssqlv1Plugin": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "usePreparedSql": {
          "type": "boolean"
        },
        "operation": {
          "type": "string"
        },
        "useAdvancedMatching": {
          "type": "string"
        },
        "table": {
          "type": "string"
        },
        "newValues": {
          "type": "string"
        },
        "oldValues": {
          "type": "string"
        },
        "filterBy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mappingMode": {
          "type": "string"
        },
        "mappedColumns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginsmssqlv1MappedColumns"
          }
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginsmssqlv1SuperblocksMetadata"
        },
        "insertedRows": {
          "type": "string"
        },
        "deletedRows": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        }
      }
    },
    "pluginsmssqlv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginsmysqlv1MappedColumns": {
      "type": "object",
      "properties": {
        "json": {
          "type": "string"
        },
        "sql": {
          "type": "string"
        }
      }
    },
    "pluginsmysqlv1Plugin": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "usePreparedSql": {
          "type": "boolean"
        },
        "operation": {
          "type": "string"
        },
        "useAdvancedMatching": {
          "type": "string"
        },
        "table": {
          "type": "string"
        },
        "newValues": {
          "type": "string"
        },
        "oldValues": {
          "type": "string"
        },
        "filterBy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mappingMode": {
          "type": "string"
        },
        "mappedColumns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginsmysqlv1MappedColumns"
          }
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginsmysqlv1SuperblocksMetadata"
        },
        "insertedRows": {
          "type": "string"
        },
        "deletedRows": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        }
      }
    },
    "pluginsmysqlv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginsocrv1Plugin": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "file": {
          "type": "string"
        },
        "fileUrl": {
          "type": "string"
        }
      }
    },
    "pluginsopenaiv1Plugin": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "generateChatGptResponsePrompt": {
          "type": "string"
        },
        "generateChatGptResponseMessageHistory": {
          "type": "string"
        },
        "generateChatGptResponseSystemInstruction": {
          "type": "string"
        },
        "generateTextType": {
          "type": "string"
        },
        "generateTextNewTextPrompt": {
          "type": "string"
        },
        "generateTextEditTextTextToEdit": {
          "type": "string"
        },
        "generateTextEditTextPrompt": {
          "type": "string"
        },
        "generateCodeType": {
          "type": "string"
        },
        "generateCodeNewCodePrompt": {
          "type": "string"
        },
        "generateCodeEditCodeCodeToEdit": {
          "type": "string"
        },
        "generateCodeEditCodePrompt": {
          "type": "string"
        },
        "checkModerationText": {
          "type": "string"
        },
        "embeddingText": {
          "type": "string"
        },
        "generateImageMethod": {
          "type": "string"
        },
        "generateImageGenerateFromPromptPrompt": {
          "type": "string"
        },
        "generateImageGenerateFromPromptImageImageSize": {
          "type": "string"
        },
        "generateImageEditImagePrompt": {
          "type": "string"
        },
        "generateImageEditImageImageFileToEdit": {
          "type": "string"
        },
        "generateImageEditImageImageMask": {
          "type": "string"
        },
        "generateImageEditImageImageSizes": {
          "type": "string"
        },
        "generateImageVaryImageImageFile": {
          "type": "string"
        },
        "generateImageVaryImageImageSize": {
          "type": "string"
        },
        "transcribeAudioToTextAudioFile": {
          "type": "string"
        },
        "transcribeAudioToTextInputLanguage": {
          "type": "string"
        },
        "transcribeAudioToTextTranslateToEnglish": {
          "type": "boolean",
          "title": "This is not a string because it is not a binding! Yay!"
        },
        "generateChatGPTResponseAiModel": {
          "type": "string"
        },
        "generateTextNewTextAiModel": {
          "type": "string"
        },
        "generateTextEditTextAiModel": {
          "type": "string"
        },
        "generateCodeNewCodeAiModel": {
          "type": "string"
        },
        "generateCodeEditCodeAiModel": {
          "type": "string"
        },
        "checkModerationAiModel": {
          "type": "string"
        },
        "generateTextEmbeddingAiModel": {
          "type": "string"
        },
        "transcribeAudioToTextAiModel": {
          "type": "string"
        },
        "generateChatGptResponseMaxTokens": {
          "type": "string",
          "title": "Super confusing - these fields might be bindings\nOtherwise, they should be ints"
        },
        "generateTextNewTextMaxTokens": {
          "type": "string"
        },
        "aiModel": {
          "type": "string"
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginsopenaiv1SuperblocksMetadata"
        }
      }
    },
    "pluginsopenaiv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginsoracledbv1Plugin": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "connection": {
          "$ref": "#/definitions/PluginOracleDbConnection"
        },
        "dynamicWorkflowConfiguration": {
          "$ref": "#/definitions/v1DynamicWorkflowConfiguration"
        },
        "runSql": {
          "$ref": "#/definitions/v1SQLExecution"
        },
        "bulkEdit": {
          "$ref": "#/definitions/v1SQLBulkEdit"
        },
        "operation": {
          "$ref": "#/definitions/v1SQLOperation"
        }
      }
    },
    "pluginspineconev1Plugin": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "dynamicWorkflowConfiguration": {
          "$ref": "#/definitions/v1DynamicWorkflowConfiguration"
        },
        "connection": {
          "$ref": "#/definitions/pluginspineconev1PluginConnection"
        },
        "listIndexes": {
          "$ref": "#/definitions/PluginListIndexes"
        },
        "createIndex": {
          "$ref": "#/definitions/PluginCreateIndex"
        },
        "upsertVector": {
          "$ref": "#/definitions/PluginUpsertVector"
        },
        "query": {
          "$ref": "#/definitions/PluginQuery"
        }
      }
    },
    "pluginspineconev1PluginConnection": {
      "type": "object",
      "properties": {
        "environment": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        }
      }
    },
    "pluginspostgresqlv1MappedColumns": {
      "type": "object",
      "properties": {
        "json": {
          "type": "string"
        },
        "sql": {
          "type": "string"
        }
      }
    },
    "pluginspostgresqlv1Plugin": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "usePreparedSql": {
          "type": "boolean"
        },
        "operation": {
          "type": "string"
        },
        "useAdvancedMatching": {
          "type": "string"
        },
        "table": {
          "type": "string"
        },
        "newValues": {
          "type": "string"
        },
        "oldValues": {
          "type": "string"
        },
        "filterBy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mappingMode": {
          "type": "string"
        },
        "mappedColumns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginspostgresqlv1MappedColumns"
          }
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginspostgresqlv1SuperblocksMetadata"
        },
        "insertedRows": {
          "type": "string"
        },
        "deletedRows": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        }
      }
    },
    "pluginspostgresqlv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginspythonv1Plugin": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginspythonv1SuperblocksMetadata"
        }
      }
    },
    "pluginspythonv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginsredisv1Plugin": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "connection": {
          "$ref": "#/definitions/pluginsredisv1PluginConnection"
        },
        "raw": {
          "$ref": "#/definitions/PluginRaw"
        },
        "structured": {
          "$ref": "#/definitions/PluginStructured"
        },
        "dynamicWorkflowConfiguration": {
          "$ref": "#/definitions/v1DynamicWorkflowConfiguration"
        }
      }
    },
    "pluginsredisv1PluginConnection": {
      "type": "object",
      "properties": {
        "url": {
          "$ref": "#/definitions/ConnectionUrl"
        },
        "fields": {
          "$ref": "#/definitions/ConnectionFields"
        }
      },
      "title": "NOTE: (joey) this does not have to be a separate message right now\n1. this follows the \"connection\" pattern\n2. this lets us easily add shared connection fields in the future"
    },
    "pluginsredshiftv1MappedColumns": {
      "type": "object",
      "properties": {
        "json": {
          "type": "string"
        },
        "sql": {
          "type": "string"
        }
      }
    },
    "pluginsredshiftv1Plugin": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "usePreparedSql": {
          "type": "boolean"
        },
        "operation": {
          "type": "string"
        },
        "useAdvancedMatching": {
          "type": "string"
        },
        "table": {
          "type": "string"
        },
        "newValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginsredshiftv1Tuple"
          }
        },
        "oldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginsredshiftv1Tuple"
          }
        },
        "filterBy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mappingMode": {
          "type": "string"
        },
        "mappedColumns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginsredshiftv1MappedColumns"
          }
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginsredshiftv1SuperblocksMetadata"
        }
      }
    },
    "pluginsredshiftv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginsredshiftv1Tuple": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "pluginsrestapiintegrationv1Plugin": {
      "type": "object",
      "properties": {
        "httpMethod": {
          "type": "string"
        },
        "responseType": {
          "type": "string"
        },
        "headers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/commonv1Property"
          }
        },
        "params": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/commonv1Property"
          }
        },
        "bodyType": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "jsonBody": {
          "type": "string"
        },
        "formData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/commonv1Property"
          }
        },
        "fileFormKey": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "urlBase": {
          "type": "string"
        },
        "urlPath": {
          "type": "string"
        },
        "authType": {
          "type": "string"
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/commonv1SuperblocksMetadata"
        },
        "verboseHttpOutput": {
          "type": "boolean",
          "title": "Include HTTP response metadata in output"
        },
        "doNotFailOnRequestError": {
          "type": "boolean",
          "description": "Do not fail executions on failed requests (4xx/5xx). We use the negative here to ensure the default (falsy) behavior matches the existing API behavior."
        },
        "openApiAction": {
          "type": "string",
          "title": "OpenAPI fields"
        },
        "openApiSpecRef": {
          "type": "string"
        },
        "openApiTenantName": {
          "type": "string"
        }
      }
    },
    "pluginsrestapiv1Plugin": {
      "type": "object",
      "properties": {
        "httpMethod": {
          "type": "string"
        },
        "responseType": {
          "type": "string"
        },
        "headers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/commonv1Property"
          }
        },
        "params": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/commonv1Property"
          }
        },
        "bodyType": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "formData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/commonv1Property"
          }
        },
        "fileFormKey": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "jsonBody": {
          "type": "string"
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/commonv1SuperblocksMetadata"
        },
        "verboseHttpOutput": {
          "type": "boolean",
          "title": "Include HTTP response metadata in output"
        },
        "doNotFailOnRequestError": {
          "type": "boolean",
          "description": "Do not fail executions on failed requests (4xx/5xx). We use the negative here to ensure the default (falsy) behavior matches the existing API behavior."
        }
      }
    },
    "pluginsrocksetv1MappedColumns": {
      "type": "object",
      "properties": {
        "json": {
          "type": "string"
        },
        "sql": {
          "type": "string"
        }
      }
    },
    "pluginsrocksetv1Plugin": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "usePreparedSql": {
          "type": "boolean"
        },
        "operation": {
          "type": "string"
        },
        "useAdvancedMatching": {
          "type": "string"
        },
        "table": {
          "type": "string"
        },
        "newValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginsrocksetv1Tuple"
          }
        },
        "oldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginsrocksetv1Tuple"
          }
        },
        "filterBy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mappingMode": {
          "type": "string"
        },
        "mappedColumns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginsrocksetv1MappedColumns"
          }
        },
        "httpMethod": {
          "type": "string"
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginsrocksetv1SuperblocksMetadata"
        }
      }
    },
    "pluginsrocksetv1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginsrocksetv1Tuple": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "pluginss3v1Custom": {
      "type": "object",
      "properties": {
        "presignedExpiration": {
          "$ref": "#/definitions/pluginss3v1Property"
        }
      }
    },
    "pluginss3v1Plugin": {
      "type": "object",
      "properties": {
        "resource": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "fileObjects": {
          "type": "string"
        },
        "responseType": {
          "type": "string"
        },
        "custom": {
          "$ref": "#/definitions/pluginss3v1Custom"
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginss3v1SuperblocksMetadata"
        }
      }
    },
    "pluginss3v1Property": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "integer",
          "format": "int32"
        },
        "editable": {
          "type": "boolean"
        },
        "internal": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "mandatory": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "defaultValue": {
          "type": "string"
        },
        "minRange": {
          "type": "string"
        },
        "maxRange": {
          "type": "string"
        },
        "valueOptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "pluginss3v1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginssalesforcev1Plugin": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Plugin fields"
        },
        "connection": {
          "$ref": "#/definitions/PluginSalesforceConnection"
        },
        "soql": {
          "$ref": "#/definitions/PluginSoql"
        },
        "crud": {
          "$ref": "#/definitions/PluginCrud"
        },
        "bulk": {
          "$ref": "#/definitions/PluginBulk"
        },
        "dynamicWorkflowConfiguration": {
          "$ref": "#/definitions/v1DynamicWorkflowConfiguration"
        }
      }
    },
    "pluginssmtpv1Plugin": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "connection": {
          "$ref": "#/definitions/PluginSmtpConnection"
        },
        "from": {
          "type": "string"
        },
        "replyTo": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "cc": {
          "type": "string"
        },
        "bcc": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "attachments": {
          "type": "string",
          "title": "stringified representation of a JSON array of objects with fields content, name, and type"
        },
        "dynamicWorkflowConfiguration": {
          "$ref": "#/definitions/v1DynamicWorkflowConfiguration"
        }
      }
    },
    "pluginssnowflakev1MappedColumns": {
      "type": "object",
      "properties": {
        "json": {
          "type": "string"
        },
        "sql": {
          "type": "string"
        }
      }
    },
    "pluginssnowflakev1Plugin": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "usePreparedSql": {
          "type": "boolean"
        },
        "operation": {
          "type": "string"
        },
        "useAdvancedMatching": {
          "type": "string"
        },
        "table": {
          "type": "string"
        },
        "newValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginssnowflakev1Tuple"
          }
        },
        "oldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginssnowflakev1Tuple"
          }
        },
        "filterBy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mappingMode": {
          "type": "string"
        },
        "mappedColumns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pluginssnowflakev1MappedColumns"
          }
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/pluginssnowflakev1SuperblocksMetadata"
        }
      }
    },
    "pluginssnowflakev1SuperblocksMetadata": {
      "type": "object",
      "properties": {
        "pluginVersion": {
          "type": "string"
        }
      }
    },
    "pluginssnowflakev1Tuple": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "pluginsworkflowv1Plugin": {
      "type": "object",
      "properties": {
        "workflow": {
          "type": "string"
        },
        "custom": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/commonv1Property"
          }
        },
        "queryParams": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/commonv1Property"
          }
        },
        "superblocksMetadata": {
          "$ref": "#/definitions/commonv1SuperblocksMetadata"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "v1AWSConfig": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string"
        },
        "auth": {
          "$ref": "#/definitions/v1AWSConfigAuth"
        },
        "endpoint": {
          "type": "string"
        }
      }
    },
    "v1AWSConfigAuth": {
      "type": "object",
      "properties": {
        "accessKeyId": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        },
        "iamRoleArn": {
          "type": "string"
        }
      }
    },
    "v1Acks": {
      "type": "string",
      "enum": [
        "ACKS_UNSPECIFIED",
        "ACKS_NONE",
        "ACKS_LEADER",
        "ACKS_ALL"
      ],
      "default": "ACKS_UNSPECIFIED"
    },
    "v1Api": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/commonv1Metadata"
        },
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Block"
          }
        },
        "trigger": {
          "$ref": "#/definitions/apiv1Trigger"
        },
        "signature": {
          "$ref": "#/definitions/v1Signature"
        }
      }
    },
    "v1Azure": {
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/v1AzureKey"
        },
        "clientCredentials": {
          "$ref": "#/definitions/AzureClientCredentials"
        }
      }
    },
    "v1AzureKey": {
      "type": "object",
      "properties": {
        "masterKey": {
          "type": "string"
        }
      }
    },
    "v1Basic": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "v1Block": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "break": {
          "$ref": "#/definitions/BlockBreak"
        },
        "return": {
          "$ref": "#/definitions/v1BlockReturn"
        },
        "wait": {
          "$ref": "#/definitions/v1BlockWait"
        },
        "parallel": {
          "$ref": "#/definitions/BlockParallel"
        },
        "conditional": {
          "$ref": "#/definitions/BlockConditional"
        },
        "loop": {
          "$ref": "#/definitions/BlockLoop"
        },
        "tryCatch": {
          "$ref": "#/definitions/BlockTryCatch"
        },
        "step": {
          "$ref": "#/definitions/v1Step"
        },
        "variables": {
          "$ref": "#/definitions/apiv1Variables"
        },
        "throw": {
          "$ref": "#/definitions/BlockThrow"
        },
        "stream": {
          "$ref": "#/definitions/v1BlockStream"
        },
        "send": {
          "$ref": "#/definitions/v1BlockSend"
        }
      }
    },
    "v1BlockReturn": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        }
      }
    },
    "v1BlockSend": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "v1BlockStream": {
      "type": "object",
      "properties": {
        "trigger": {
          "$ref": "#/definitions/BlockStreamTrigger"
        },
        "process": {
          "$ref": "#/definitions/v1Blocks"
        },
        "variables": {
          "$ref": "#/definitions/BlockStreamVariables"
        },
        "options": {
          "$ref": "#/definitions/BlockStreamOptions"
        }
      }
    },
    "v1BlockWait": {
      "type": "object",
      "properties": {
        "condition": {
          "type": "string"
        }
      }
    },
    "v1Blocks": {
      "type": "object",
      "properties": {
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Block"
          }
        }
      }
    },
    "v1Cluster": {
      "type": "object",
      "properties": {
        "brokers": {
          "type": "string",
          "description": "NOTE(frank): Due to limitations in our plugin template system, we can't use an array....."
        },
        "ssl": {
          "type": "boolean"
        },
        "sasl": {
          "$ref": "#/definitions/v1SASL"
        }
      }
    },
    "v1Compression": {
      "type": "string",
      "enum": [
        "COMPRESSION_UNSPECIFIED",
        "COMPRESSION_GZIP",
        "COMPRESSION_SNAPPY",
        "COMPRESSION_LZ4",
        "COMPRESSION_ZSTD"
      ],
      "default": "COMPRESSION_UNSPECIFIED"
    },
    "v1DynamicWorkflowConfiguration": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "workflowId": {
          "type": "string"
        }
      }
    },
    "v1FileMetadata": {
      "type": "object",
      "properties": {
        "filename": {
          "type": "string"
        }
      }
    },
    "v1Profiles": {
      "type": "object",
      "properties": {
        "modes": {
          "$ref": "#/definitions/ProfilesModes"
        }
      }
    },
    "v1Resource": {
      "type": "object",
      "properties": {
        "api": {
          "$ref": "#/definitions/v1Api"
        },
        "literal": {
          "$ref": "#/definitions/ResourceLiteral"
        },
        "apiLiteral": {
          "$ref": "#/definitions/ResourceApiLiteral"
        },
        "commitId": {
          "type": "string"
        },
        "branchName": {
          "type": "string"
        }
      }
    },
    "v1SASL": {
      "type": "object",
      "properties": {
        "mechanism": {
          "$ref": "#/definitions/SASLMechanism"
        },
        "username": {
          "type": "string",
          "title": "non-aws fields"
        },
        "password": {
          "type": "string"
        },
        "accessKeyId": {
          "type": "string",
          "title": "aws fields"
        },
        "secretKey": {
          "type": "string"
        },
        "sessionToken": {
          "type": "string"
        },
        "authorizationIdentity": {
          "type": "string"
        }
      }
    },
    "v1SQLBulkEdit": {
      "type": "object",
      "properties": {
        "matchingMode": {
          "$ref": "#/definitions/v1SQLMatchingMode"
        },
        "schema": {
          "type": "string"
        },
        "table": {
          "type": "string"
        },
        "updatedRows": {
          "type": "string"
        },
        "oldRows": {
          "type": "string"
        },
        "filterBy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mappingMode": {
          "$ref": "#/definitions/v1SQLMappingMode"
        },
        "mappedColumns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SQLMappedColumns"
          }
        },
        "insertedRows": {
          "type": "string"
        },
        "deletedRows": {
          "type": "string"
        }
      }
    },
    "v1SQLExecution": {
      "type": "object",
      "properties": {
        "sqlBody": {
          "type": "string"
        },
        "useParameterized": {
          "type": "boolean"
        }
      }
    },
    "v1SQLMappedColumns": {
      "type": "object",
      "properties": {
        "json": {
          "type": "string"
        },
        "sql": {
          "type": "string"
        }
      }
    },
    "v1SQLMappingMode": {
      "type": "string",
      "enum": [
        "SQL_MAPPING_MODE_UNSPECIFIED",
        "SQL_MAPPING_MODE_AUTO",
        "SQL_MAPPING_MODE_MANUAL"
      ],
      "default": "SQL_MAPPING_MODE_UNSPECIFIED"
    },
    "v1SQLMatchingMode": {
      "type": "string",
      "enum": [
        "SQL_MATCHING_MODE_UNSPECIFIED",
        "SQL_MATCHING_MODE_AUTO",
        "SQL_MATCHING_MODE_ADVANCED"
      ],
      "default": "SQL_MATCHING_MODE_UNSPECIFIED"
    },
    "v1SQLOperation": {
      "type": "string",
      "enum": [
        "SQL_OPERATION_UNSPECIFIED",
        "SQL_OPERATION_RUN_SQL",
        "SQL_OPERATION_UPDATE_ROWS"
      ],
      "default": "SQL_OPERATION_UNSPECIFIED"
    },
    "v1SSHAuthMethod": {
      "type": "string",
      "enum": [
        "SSH_AUTH_METHOD_UNSPECIFIED",
        "SSH_AUTH_METHOD_PASSWORD",
        "SSH_AUTH_METHOD_PUB_KEY_RSA",
        "SSH_AUTH_METHOD_PUB_KEY_ED25519",
        "SSH_AUTH_METHOD_USER_PRIVATE_KEY"
      ],
      "default": "SSH_AUTH_METHOD_UNSPECIFIED"
    },
    "v1SSHConfiguration": {
      "type": "object",
      "properties": {
        "authenticationMethod": {
          "$ref": "#/definitions/v1SSHAuthMethod"
        },
        "enabled": {
          "type": "boolean"
        },
        "host": {
          "type": "string"
        },
        "passphrase": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "privateKey": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1SignRequest": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/v1Resource"
        }
      }
    },
    "v1SignResponse": {
      "type": "object",
      "properties": {
        "signature": {
          "$ref": "#/definitions/v1Signature"
        }
      }
    },
    "v1Signature": {
      "type": "object",
      "properties": {
        "keyId": {
          "type": "string"
        },
        "data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1Step": {
      "type": "object",
      "properties": {
        "integration": {
          "type": "string",
          "title": "Important: integration means integration id"
        },
        "python": {
          "$ref": "#/definitions/pluginspythonv1Plugin"
        },
        "bigquery": {
          "$ref": "#/definitions/pluginsbigqueryv1Plugin"
        },
        "dynamodb": {
          "$ref": "#/definitions/pluginsdynamodbv1Plugin"
        },
        "email": {
          "$ref": "#/definitions/pluginsemailv1Plugin"
        },
        "graphql": {
          "$ref": "#/definitions/pluginsgraphqlv1Plugin"
        },
        "graphqlintegration": {
          "$ref": "#/definitions/pluginsgraphqlv1Plugin"
        },
        "gsheets": {
          "$ref": "#/definitions/pluginsgsheetsv1Plugin"
        },
        "mariadb": {
          "$ref": "#/definitions/pluginsmariadbv1Plugin"
        },
        "mssql": {
          "$ref": "#/definitions/pluginsmssqlv1Plugin"
        },
        "mysql": {
          "$ref": "#/definitions/pluginsmysqlv1Plugin"
        },
        "postgres": {
          "$ref": "#/definitions/pluginspostgresqlv1Plugin"
        },
        "redshift": {
          "$ref": "#/definitions/pluginsredshiftv1Plugin"
        },
        "restapi": {
          "$ref": "#/definitions/pluginsrestapiv1Plugin"
        },
        "restapiintegration": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "rockset": {
          "$ref": "#/definitions/pluginsrocksetv1Plugin"
        },
        "s3": {
          "$ref": "#/definitions/pluginss3v1Plugin"
        },
        "snowflake": {
          "$ref": "#/definitions/pluginssnowflakev1Plugin"
        },
        "workflow": {
          "$ref": "#/definitions/pluginsworkflowv1Plugin"
        },
        "javascript": {
          "$ref": "#/definitions/pluginsjavascriptv1Plugin"
        },
        "mongodb": {
          "$ref": "#/definitions/pluginsmongodbv1Plugin"
        },
        "gcs": {
          "$ref": "#/definitions/pluginsgcsv1Plugin"
        },
        "openai": {
          "$ref": "#/definitions/pluginsopenaiv1Plugin"
        },
        "superblocks-ocr": {
          "$ref": "#/definitions/pluginsocrv1Plugin",
          "title": "Remapped due to proto not allowing dashes in field names"
        },
        "kafka": {
          "$ref": "#/definitions/pluginskafkav1Plugin"
        },
        "confluent": {
          "$ref": "#/definitions/pluginskafkav1Plugin"
        },
        "msk": {
          "$ref": "#/definitions/pluginskafkav1Plugin"
        },
        "redpanda": {
          "$ref": "#/definitions/pluginskafkav1Plugin"
        },
        "aivenkafka": {
          "$ref": "#/definitions/pluginskafkav1Plugin",
          "title": "There's also aiven(postgres|opensearch|redis|mysql|cassandra)"
        },
        "cockroachdb": {
          "$ref": "#/definitions/pluginscockroachdbv1Plugin"
        },
        "airtable": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "notion": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "pagerduty": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "sendgrid": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "slack": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "athena": {
          "$ref": "#/definitions/pluginsathenav1Plugin"
        },
        "redis": {
          "$ref": "#/definitions/pluginsredisv1Plugin"
        },
        "asana": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "github": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "smtp": {
          "$ref": "#/definitions/pluginssmtpv1Plugin"
        },
        "salesforce": {
          "$ref": "#/definitions/pluginssalesforcev1Plugin"
        },
        "bitbucket": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "circleci": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "front": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "intercom": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "segment": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "launchdarkly": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "dropbox": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "twilio": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "googledrive": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "googleanalytics": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "box": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "hubspot": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "stripe": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "zoom": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "jira": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "zendesk": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "adls": {
          "$ref": "#/definitions/pluginsadlsv1Plugin"
        },
        "pinecone": {
          "$ref": "#/definitions/pluginspineconev1Plugin"
        },
        "cosmosdb": {
          "$ref": "#/definitions/pluginscosmosdbv1Plugin"
        },
        "datadog": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "xero": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "oracledb": {
          "$ref": "#/definitions/pluginsoracledbv1Plugin"
        },
        "elasticsearch": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "databricks": {
          "$ref": "#/definitions/pluginsdatabricksv1Plugin"
        },
        "couchbase": {
          "$ref": "#/definitions/pluginscouchbasev1Plugin"
        },
        "custom": {
          "$ref": "#/definitions/pluginscustomv1Plugin"
        },
        "anthropic": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "cohere": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "fireworks": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "mistral": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "groq": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "perplexity": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "stabilityai": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "gemini": {
          "$ref": "#/definitions/pluginsrestapiintegrationv1Plugin"
        },
        "kinesis": {
          "$ref": "#/definitions/pluginskinesisv1Plugin"
        }
      }
    },
    "v1Timestamps": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "deactivated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1TriggerWorkflow": {
      "type": "object",
      "properties": {
        "options": {
          "$ref": "#/definitions/TriggerWorkflowOptions"
        },
        "parameters": {
          "$ref": "#/definitions/TriggerWorkflowParameters"
        }
      }
    },
    "v1VariablesMode": {
      "type": "string",
      "enum": [
        "MODE_UNSPECIFIED",
        "MODE_READ",
        "MODE_READWRITE"
      ],
      "default": "MODE_UNSPECIFIED"
    },
    "v1VariablesType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_SIMPLE",
        "TYPE_ADVANCED",
        "TYPE_NATIVE",
        "TYPE_FILEPICKER"
      ],
      "default": "TYPE_UNSPECIFIED",
      "title": "- TYPE_SIMPLE: myVar1.get()\nmyVar1.set()\n - TYPE_ADVANCED: await myVar1.get()\nawait myVar1.set()\n - TYPE_NATIVE: myVar1\nmyVar1 = 5; // NOTE(frank): We won't implement MODE_READWRITE for this yet.\n - TYPE_FILEPICKER: await myVar1.readContentsAsync()\nawait myVar1.readContentsAsync(someMode)\nmyVar1.readContents()\nmyVar1.readContents(someMode)"
    },
    "v1VerifyRequest": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Resource"
          }
        }
      }
    },
    "v1VerifyResponse": {
      "type": "object",
      "properties": {
        "keyId": {
          "type": "string"
        }
      }
    }
  }
}
