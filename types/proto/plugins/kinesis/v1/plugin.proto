syntax = "proto3";

package plugins.kinesis.v1;

import "plugins/common/v1/plugin.proto";

option go_package = "github.com/superblocksteam/agent/types/gen/go/plugins/kinesis/v1";

message Plugin {
  optional string name = 1;
  KinesisConnection connection = 2;
  OperationType operation_type = 3;
  optional KinesisPut put = 4;
  optional KinesisGet get = 5;
  optional plugins.common.v1.DynamicWorkflowConfiguration dynamic_workflow_configuration = 6;

  message KinesisConnection {
    plugins.common.v1.AWSConfig aws_config = 1;
  }

  // https://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecord.html
  // https://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecords.html
  message KinesisPut {
    string data = 1;
    string partition_key = 2;
    StreamIdentifier stream_identifier_type = 3;
    optional string stream_name = 4;
    optional string stream_arn = 5;
  }

  // https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetRecords.html
  // we will need to get a shard iterator first
  // https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html
  message KinesisGet {
    string shard_id = 2;
    ShardIteratorType shard_iterator_type = 3;
    int32 limit = 4;
    // not required by kinesis, but something we want to allow users to configure
    // this is the amount of time in milliseconds between asking kinesis to get records when polling in a loop
    int32 polling_cooldown_ms = 5;
    // these 2 are required depending on the shard iterator type selected
    optional string starting_sequence_number = 6;
    optional string timestamp = 7;
    StreamIdentifier stream_identifier_type = 8;
    optional string stream_name = 9;
    optional string stream_arn = 10;
  }

  // https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#API_GetShardIterator_RequestSyntax
  enum ShardIteratorType {
    SHARD_ITERATOR_TYPE_UNSPECIFIED = 0;
    SHARD_ITERATOR_TYPE_AT_SEQUENCE_NUMBER = 1;
    SHARD_ITERATOR_TYPE_AFTER_SEQUENCE_NUMBER = 2;
    SHARD_ITERATOR_TYPE_AT_TIMESTAMP = 3;
    SHARD_ITERATOR_TYPE_TRIM_HORIZON = 4;
    SHARD_ITERATOR_TYPE_LATEST = 5;
  }

  enum OperationType {
    OPERATION_TYPE_UNSPECIFIED = 0;
    OPERATION_TYPE_GET = 1;
    OPERATION_TYPE_PUT = 2;
  }

  enum StreamIdentifier {
    STREAM_IDENTIFIER_UNSPECIFIED = 0;
    STREAM_IDENTIFIER_STREAM_NAME = 1;
    STREAM_IDENTIFIER_STREAM_ARN = 2;
  }
}

message Metadata {
  repeated string streams = 1;
}
